name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: activity_tracker_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: activity-tracker/backend/package-lock.json

    - name: Install backend dependencies
      run: |
        cd activity-tracker/backend
        npm ci

    - name: Run backend linting
      run: |
        cd activity-tracker/backend
        npm run lint

    - name: Run backend tests
      run: |
        cd activity-tracker/backend
        npm run test:unit
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_NAME: activity_tracker_test
        JWT_SECRET: test-secret
        NODE_ENV: test
    
    - name: Run backend integration tests
      run: |
        cd activity-tracker/backend
        npm run test:integration
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USERNAME: postgres
        DB_PASSWORD: postgres
        DB_NAME: activity_tracker_test
        JWT_SECRET: test-secret
        NODE_ENV: test

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: activity-tracker/frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd activity-tracker/frontend
        npm ci

    - name: Run frontend linting
      run: |
        cd activity-tracker/frontend
        npm run lint

    - name: Run frontend tests
      run: |
        cd activity-tracker/frontend
        npm run test
      env:
        NEXT_PUBLIC_API_URL: http://localhost:3001
    
    - name: Build frontend
      run: |
        cd activity-tracker/frontend
        npm run build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:3001

  security-scan:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Azure Container Apps (Staging)
      uses: azure/container-apps-deploy-action@v1
      with:
        acrName: ${{ secrets.AZURE_ACR_NAME }}
        containerAppName: activity-tracker-staging
        resourceGroup: ${{ secrets.AZURE_RESOURCE_GROUP }}
        imageToDeploy: ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/activity-tracker:${{ github.sha }}
        azureCredentials: ${{ secrets.AZURE_CREDENTIALS }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Azure Container Apps (Production)
      uses: azure/container-apps-deploy-action@v1
      with:
        acrName: ${{ secrets.AZURE_ACR_NAME }}
        containerAppName: activity-tracker-production
        resourceGroup: ${{ secrets.AZURE_RESOURCE_GROUP }}
        imageToDeploy: ${{ secrets.AZURE_ACR_NAME }}.azurecr.io/activity-tracker:${{ github.sha }}
        azureCredentials: ${{ secrets.AZURE_CREDENTIALS }}
